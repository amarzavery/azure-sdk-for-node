/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Diagnostic details.
 *
 * @extends models['Resource']
 */
class DiagnosticContract extends models['Resource'] {
  /**
   * Create a DiagnosticContract.
   * @member {string} [alwaysLog] Specifies for what type of messages sampling
   * settings should not apply. Possible values include: 'allErrors'
   * @member {string} loggerId Resource Id of a target logger.
   * @member {object} [sampling] Sampling settings for Diagnostic.
   * @member {string} [sampling.samplingType] Sampling type. Possible values
   * include: 'fixed'
   * @member {number} [sampling.percentage] Rate of sampling for fixed-rate
   * sampling.
   * @member {object} [frontend] Diagnostic settings for incoming/outcoming
   * HTTP messages to the Gateway.
   * @member {object} [frontend.request] Diagnostic settings for request.
   * @member {array} [frontend.request.headers] Array of HTTP Headers to log.
   * @member {object} [frontend.request.body] Body logging settings.
   * @member {number} [frontend.request.body.bytes] Number of request body
   * bytes to log.
   * @member {object} [frontend.response] Diagnostic settings for response.
   * @member {array} [frontend.response.headers] Array of HTTP Headers to log.
   * @member {object} [frontend.response.body] Body logging settings.
   * @member {number} [frontend.response.body.bytes] Number of request body
   * bytes to log.
   * @member {object} [backend] Diagnostic settings for incoming/outcoming HTTP
   * messages to the Backend
   * @member {object} [backend.request] Diagnostic settings for request.
   * @member {array} [backend.request.headers] Array of HTTP Headers to log.
   * @member {object} [backend.request.body] Body logging settings.
   * @member {number} [backend.request.body.bytes] Number of request body bytes
   * to log.
   * @member {object} [backend.response] Diagnostic settings for response.
   * @member {array} [backend.response.headers] Array of HTTP Headers to log.
   * @member {object} [backend.response.body] Body logging settings.
   * @member {number} [backend.response.body.bytes] Number of request body
   * bytes to log.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DiagnosticContract
   *
   * @returns {object} metadata of DiagnosticContract
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DiagnosticContract',
      type: {
        name: 'Composite',
        className: 'DiagnosticContract',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          alwaysLog: {
            required: false,
            serializedName: 'properties.alwaysLog',
            type: {
              name: 'String'
            }
          },
          loggerId: {
            required: true,
            serializedName: 'properties.loggerId',
            type: {
              name: 'String'
            }
          },
          sampling: {
            required: false,
            serializedName: 'properties.sampling',
            type: {
              name: 'Composite',
              className: 'SamplingSettings'
            }
          },
          frontend: {
            required: false,
            serializedName: 'properties.frontend',
            type: {
              name: 'Composite',
              className: 'PipelineDiagnosticSettings'
            }
          },
          backend: {
            required: false,
            serializedName: 'properties.backend',
            type: {
              name: 'Composite',
              className: 'PipelineDiagnosticSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = DiagnosticContract;
