/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Predict an image url and saves the result
 *
 * @param {uuid} projectId The project id
 *
 * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
 * url of the image to be evaluated
 *
 * @param {string} [imageUrl.url]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {uuid} [options.iterationId] Optional. Specifies the id of a
 * particular iteration to evaluate against.
 * The default iteration for the project will be used when not specified
 *
 * @param {string} [options.application] Optional. Specifies the name of
 * application using the endpoint
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImagePrediction} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _predictImageUrl(projectId, imageUrl, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let iterationId = (options && options.iterationId !== undefined) ? options.iterationId : undefined;
  let application = (options && options.application !== undefined) ? options.application : undefined;
  // Validate
  try {
    if (projectId === null || projectId === undefined || typeof projectId.valueOf() !== 'string' || !msRest.isValidUuid(projectId)) {
      throw new Error('projectId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (imageUrl === null || imageUrl === undefined) {
      throw new Error('imageUrl cannot be null or undefined.');
    }
    if (iterationId !== null && iterationId !== undefined && !(typeof iterationId.valueOf() === 'string' && msRest.isValidUuid(iterationId))) {
      throw new Error('iterationId must be of type string and must be a valid uuid.');
    }
    if (application !== null && application !== undefined && typeof application.valueOf() !== 'string') {
      throw new Error('application must be of type string.');
    }
    if (this.apiKey === null || this.apiKey === undefined || typeof this.apiKey.valueOf() !== 'string') {
      throw new Error('this.apiKey cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Prediction/{projectId}/url';
  requestUrl = requestUrl.replace('{projectId}', encodeURIComponent(projectId.toString()));
  let queryParameters = [];
  if (iterationId !== null && iterationId !== undefined) {
    queryParameters.push('iterationId=' + encodeURIComponent(iterationId.toString()));
  }
  if (application !== null && application !== undefined) {
    queryParameters.push('application=' + encodeURIComponent(application));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.apiKey !== undefined && this.apiKey !== null) {
    httpRequest.headers['Prediction-Key'] = this.apiKey;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['ImageUrl']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImagePrediction']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Predict an image and saves the result
 *
 * @param {uuid} projectId The project id
 *
 * @param {object} imageData
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {uuid} [options.iterationId] Optional. Specifies the id of a
 * particular iteration to evaluate against.
 * The default iteration for the project will be used when not specified
 *
 * @param {string} [options.application] Optional. Specifies the name of
 * application using the endpoint
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImagePrediction} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _predictImage(projectId, imageData, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let iterationId = (options && options.iterationId !== undefined) ? options.iterationId : undefined;
  let application = (options && options.application !== undefined) ? options.application : undefined;
  // Validate
  try {
    if (projectId === null || projectId === undefined || typeof projectId.valueOf() !== 'string' || !msRest.isValidUuid(projectId)) {
      throw new Error('projectId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (iterationId !== null && iterationId !== undefined && !(typeof iterationId.valueOf() === 'string' && msRest.isValidUuid(iterationId))) {
      throw new Error('iterationId must be of type string and must be a valid uuid.');
    }
    if (application !== null && application !== undefined && typeof application.valueOf() !== 'string') {
      throw new Error('application must be of type string.');
    }
    if (imageData === null || imageData === undefined) {
      throw new Error('imageData cannot be null or undefined and it must be of type object.');
    }
    if (this.apiKey === null || this.apiKey === undefined || typeof this.apiKey.valueOf() !== 'string') {
      throw new Error('this.apiKey cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Prediction/{projectId}/image';
  requestUrl = requestUrl.replace('{projectId}', encodeURIComponent(projectId.toString()));
  let queryParameters = [];
  if (iterationId !== null && iterationId !== undefined) {
    queryParameters.push('iterationId=' + encodeURIComponent(iterationId.toString()));
  }
  if (application !== null && application !== undefined) {
    queryParameters.push('application=' + encodeURIComponent(application));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'multipart/form-data';
  if (this.apiKey !== undefined && this.apiKey !== null) {
    httpRequest.headers['Prediction-Key'] = this.apiKey;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let formData = {};
  if (imageData !== undefined && imageData !== null) {
    formData['imageData'] = imageData;
  }
  httpRequest.formData = formData;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImagePrediction']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Predict an image url without saving the result
 *
 * @param {uuid} projectId The project id
 *
 * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
 * url of the image to be evaluated
 *
 * @param {string} [imageUrl.url]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {uuid} [options.iterationId] Optional. Specifies the id of a
 * particular iteration to evaluate against.
 * The default iteration for the project will be used when not specified
 *
 * @param {string} [options.application] Optional. Specifies the name of
 * application using the endpoint
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImagePrediction} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _predictImageUrlWithNoStore(projectId, imageUrl, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let iterationId = (options && options.iterationId !== undefined) ? options.iterationId : undefined;
  let application = (options && options.application !== undefined) ? options.application : undefined;
  // Validate
  try {
    if (projectId === null || projectId === undefined || typeof projectId.valueOf() !== 'string' || !msRest.isValidUuid(projectId)) {
      throw new Error('projectId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (imageUrl === null || imageUrl === undefined) {
      throw new Error('imageUrl cannot be null or undefined.');
    }
    if (iterationId !== null && iterationId !== undefined && !(typeof iterationId.valueOf() === 'string' && msRest.isValidUuid(iterationId))) {
      throw new Error('iterationId must be of type string and must be a valid uuid.');
    }
    if (application !== null && application !== undefined && typeof application.valueOf() !== 'string') {
      throw new Error('application must be of type string.');
    }
    if (this.apiKey === null || this.apiKey === undefined || typeof this.apiKey.valueOf() !== 'string') {
      throw new Error('this.apiKey cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Prediction/{projectId}/url/nostore';
  requestUrl = requestUrl.replace('{projectId}', encodeURIComponent(projectId.toString()));
  let queryParameters = [];
  if (iterationId !== null && iterationId !== undefined) {
    queryParameters.push('iterationId=' + encodeURIComponent(iterationId.toString()));
  }
  if (application !== null && application !== undefined) {
    queryParameters.push('application=' + encodeURIComponent(application));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.apiKey !== undefined && this.apiKey !== null) {
    httpRequest.headers['Prediction-Key'] = this.apiKey;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['ImageUrl']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImagePrediction']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Predict an image without saving the result
 *
 * @param {uuid} projectId The project id
 *
 * @param {object} imageData
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {uuid} [options.iterationId] Optional. Specifies the id of a
 * particular iteration to evaluate against.
 * The default iteration for the project will be used when not specified
 *
 * @param {string} [options.application] Optional. Specifies the name of
 * application using the endpoint
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImagePrediction} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _predictImageWithNoStore(projectId, imageData, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let iterationId = (options && options.iterationId !== undefined) ? options.iterationId : undefined;
  let application = (options && options.application !== undefined) ? options.application : undefined;
  // Validate
  try {
    if (projectId === null || projectId === undefined || typeof projectId.valueOf() !== 'string' || !msRest.isValidUuid(projectId)) {
      throw new Error('projectId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (iterationId !== null && iterationId !== undefined && !(typeof iterationId.valueOf() === 'string' && msRest.isValidUuid(iterationId))) {
      throw new Error('iterationId must be of type string and must be a valid uuid.');
    }
    if (application !== null && application !== undefined && typeof application.valueOf() !== 'string') {
      throw new Error('application must be of type string.');
    }
    if (imageData === null || imageData === undefined) {
      throw new Error('imageData cannot be null or undefined and it must be of type object.');
    }
    if (this.apiKey === null || this.apiKey === undefined || typeof this.apiKey.valueOf() !== 'string') {
      throw new Error('this.apiKey cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'Prediction/{projectId}/image/nostore';
  requestUrl = requestUrl.replace('{projectId}', encodeURIComponent(projectId.toString()));
  let queryParameters = [];
  if (iterationId !== null && iterationId !== undefined) {
    queryParameters.push('iterationId=' + encodeURIComponent(iterationId.toString()));
  }
  if (application !== null && application !== undefined) {
    queryParameters.push('application=' + encodeURIComponent(application));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'multipart/form-data';
  if (this.apiKey !== undefined && this.apiKey !== null) {
    httpRequest.headers['Prediction-Key'] = this.apiKey;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let formData = {};
  if (imageData !== undefined && imageData !== null) {
    formData['imageData'] = imageData;
  }
  httpRequest.formData = formData;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImagePrediction']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a PredictionAPIClient. */
class PredictionAPIClient extends ServiceClient {
  /**
   * Create a PredictionAPIClient.
   * @param {string} apiKey -
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(apiKey, baseUri, options) {
    if (apiKey === null || apiKey === undefined) {
      throw new Error('\'apiKey\' cannot be null.');
    }

    if (!options) options = {};

    super(null, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://api.cognitive.microsoft.com/customvision/v2.0';
    }
    this.apiKey = apiKey;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._predictImageUrl = _predictImageUrl;
    this._predictImage = _predictImage;
    this._predictImageUrlWithNoStore = _predictImageUrlWithNoStore;
    this._predictImageWithNoStore = _predictImageWithNoStore;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Predict an image url and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  predictImageUrlWithHttpOperationResponse(projectId, imageUrl, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._predictImageUrl(projectId, imageUrl, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Predict an image url and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImageUrl(projectId, imageUrl, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._predictImageUrl(projectId, imageUrl, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._predictImageUrl(projectId, imageUrl, options, optionalCallback);
    }
  }

  /**
   * @summary Predict an image and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  predictImageWithHttpOperationResponse(projectId, imageData, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._predictImage(projectId, imageData, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Predict an image and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImage(projectId, imageData, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._predictImage(projectId, imageData, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._predictImage(projectId, imageData, options, optionalCallback);
    }
  }

  /**
   * @summary Predict an image url without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  predictImageUrlWithNoStoreWithHttpOperationResponse(projectId, imageUrl, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._predictImageUrlWithNoStore(projectId, imageUrl, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Predict an image url without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImageUrlWithNoStore(projectId, imageUrl, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._predictImageUrlWithNoStore(projectId, imageUrl, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._predictImageUrlWithNoStore(projectId, imageUrl, options, optionalCallback);
    }
  }

  /**
   * @summary Predict an image without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  predictImageWithNoStoreWithHttpOperationResponse(projectId, imageData, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._predictImageWithNoStore(projectId, imageData, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Predict an image without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImageWithNoStore(projectId, imageData, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._predictImageWithNoStore(projectId, imageData, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._predictImageWithNoStore(projectId, imageData, options, optionalCallback);
    }
  }

}

module.exports = PredictionAPIClient;
module.exports['default'] = PredictionAPIClient;
module.exports.PredictionAPIClient = PredictionAPIClient;
module.exports.PredictionAPIModels = models;
