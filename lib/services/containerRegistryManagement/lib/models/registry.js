/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object that represents a container registry.
 *
 * @extends models['Resource']
 */
class Registry extends models['Resource'] {
  /**
   * Create a Registry.
   * @property {object} sku The SKU of the container registry.
   * @property {string} [sku.name] The SKU name of the container registry.
   * Required for registry creation. Possible values include: 'Classic',
   * 'Basic', 'Standard', 'Premium'
   * @property {string} [sku.tier] The SKU tier based on the SKU name. Possible
   * values include: 'Classic', 'Basic', 'Standard', 'Premium'
   * @property {string} [loginServer] The URL that can be used to log into the
   * container registry.
   * @property {date} [creationDate] The creation date of the container
   * registry in ISO8601 format.
   * @property {string} [provisioningState] The provisioning state of the
   * container registry at the time the operation was called. Possible values
   * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
   * 'Canceled'
   * @property {object} [status] The status of the container registry at the
   * time the operation was called.
   * @property {string} [status.displayStatus] The short label for the status.
   * @property {string} [status.message] The detailed message for the status,
   * including alerts and error messages.
   * @property {date} [status.timestamp] The timestamp when the status was
   * changed to the current value.
   * @property {boolean} [adminUserEnabled] The value that indicates whether
   * the admin user is enabled. Default value: false .
   * @property {object} [storageAccount] The properties of the storage account
   * for the container registry. Only applicable to Classic SKU.
   * @property {string} [storageAccount.id] The resource ID of the storage
   * account.
   * @property {object} [networkRuleSet] The network rule set for a container
   * registry.
   * @property {string} [networkRuleSet.defaultAction] The default action of
   * allow or deny when no other rules match. Possible values include: 'Allow',
   * 'Deny'
   * @property {array} [networkRuleSet.virtualNetworkRules] The virtual network
   * rules.
   * @property {array} [networkRuleSet.ipRules] The IP ACL rules.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Registry
   *
   * @returns {object} metadata of Registry
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Registry',
      type: {
        name: 'Composite',
        className: 'Registry',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          sku: {
            required: true,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          loginServer: {
            required: false,
            readOnly: true,
            serializedName: 'properties.loginServer',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'Composite',
              className: 'Status'
            }
          },
          adminUserEnabled: {
            required: false,
            serializedName: 'properties.adminUserEnabled',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          storageAccount: {
            required: false,
            serializedName: 'properties.storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccountProperties'
            }
          },
          networkRuleSet: {
            required: false,
            serializedName: 'properties.networkRuleSet',
            type: {
              name: 'Composite',
              className: 'NetworkRuleSet'
            }
          }
        }
      }
    };
  }
}

module.exports = Registry;
