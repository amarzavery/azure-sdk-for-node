/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Gets a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.expand] The child resources to include in the
 * response.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, sqlVirtualMachineName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (sqlVirtualMachineName === null || sqlVirtualMachineName === undefined || typeof sqlVirtualMachineName.valueOf() !== 'string') {
      throw new Error('sqlVirtualMachineName cannot be null or undefined and it must be of type string.');
    }
    if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
      throw new Error('expand must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{sqlVirtualMachineName}', encodeURIComponent(sqlVirtualMachineName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates or updates a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} parameters The SQL virtual machine.
 *
 * @param {object} [parameters.identity] Azure Active Directory identity of the
 * server.
 *
 * @param {string} [parameters.identity.type] The identity type. Set this to
 * 'SystemAssigned' in order to automatically create and assign an Azure Active
 * Directory principal for the resource. Possible values include:
 * 'SystemAssigned'
 *
 * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
 * underlying virtual machine created from SQL marketplace image.
 *
 * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
 * Possible values include: 'PAYG', 'AHUB'
 *
 * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
 * id of the SQL virtual machine group this SQL virtual machine is or will be
 * part of.
 *
 * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
 * setting up Windows Server Failover Cluster for SQL availability group.
 *
 * @param {string}
 * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
 * bootstrap account password.
 *
 * @param {string}
 * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
 * operator account password.
 *
 * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
 * SQL service account password.
 *
 * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
 * applying critical security updates to SQL virtual machine.
 *
 * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
 * autopatching on SQL virtual machine.
 *
 * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
 * apply the patch on. Possible values include: 'Monday', 'Tuesday',
 * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
 *
 * @param {number}
 * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
 * day when patching is initiated. Local VM time.
 *
 * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
 * Duration of patching.
 *
 * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
 * Server.
 *
 * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
 * autobackup on SQL virtual machine.
 *
 * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
 * disable encryption for backup on SQL virtual machine.
 *
 * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
 * period of backup: 1-30 days.
 *
 * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
 * account url where backup will be taken to.
 *
 * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
 * account key where backup will be taken to.
 *
 * @param {string} [parameters.autoBackupSettings.password] Password for
 * encryption on backup.
 *
 * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
 * exclude system databases from auto backup.
 *
 * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
 * schedule type. Possible values include: 'Manual', 'Automated'
 *
 * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
 * Frequency of full backups. In both cases, full backups begin during the next
 * scheduled time window. Possible values include: 'Daily', 'Weekly'
 *
 * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
 * time of a given day during which full backups can take place. 0-23 hours.
 *
 * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
 * Duration of the time window of a given day during which full backups can
 * take place. 1-23 hours.
 *
 * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
 * of log backups. 5-60 minutes.
 *
 * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
 * settings.
 *
 * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
 * disable key vault credential setting.
 *
 * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
 * Credential name.
 *
 * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
 * Azure Key Vault url.
 *
 * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
 * Service principal name to access key vault.
 *
 * @param {string}
 * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
 * principal name secret to access key vault.
 *
 * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
 * Server configuration management settings.
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
 * SQL connectivity type settings.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
 * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
 * 'PUBLIC'
 *
 * @param {number}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
 * SQL Server port.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
 * SQL Server sysadmin login to create.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
 * SQL Server sysadmin login password.
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
 * SQL workload type settings.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
 * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
 * SQL storage update settings.
 *
 * @param {number}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
 * Virtual machine disk count.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
 * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
 * 'EXTEND', 'ADD'
 *
 * @param {number}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
 * Device id of the first disk to be updated.
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
 * Additional SQL feature settings.
 *
 * @param {boolean}
 * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
 * Enable or disable R services (SQL 2016 onwards).
 *
 * @param {string} parameters.location Resource location.
 *
 * @param {object} [parameters.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, sqlVirtualMachineName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Updates a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} parameters The SQL virtual machine.
 *
 * @param {object} [parameters.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, sqlVirtualMachineName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets all SQL virtual machines in a resource group.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all SQL virtual machines in a subscription.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates or updates a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} parameters The SQL virtual machine.
 *
 * @param {object} [parameters.identity] Azure Active Directory identity of the
 * server.
 *
 * @param {string} [parameters.identity.type] The identity type. Set this to
 * 'SystemAssigned' in order to automatically create and assign an Azure Active
 * Directory principal for the resource. Possible values include:
 * 'SystemAssigned'
 *
 * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
 * underlying virtual machine created from SQL marketplace image.
 *
 * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
 * Possible values include: 'PAYG', 'AHUB'
 *
 * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
 * id of the SQL virtual machine group this SQL virtual machine is or will be
 * part of.
 *
 * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
 * setting up Windows Server Failover Cluster for SQL availability group.
 *
 * @param {string}
 * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
 * bootstrap account password.
 *
 * @param {string}
 * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
 * operator account password.
 *
 * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
 * SQL service account password.
 *
 * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
 * applying critical security updates to SQL virtual machine.
 *
 * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
 * autopatching on SQL virtual machine.
 *
 * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
 * apply the patch on. Possible values include: 'Monday', 'Tuesday',
 * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
 *
 * @param {number}
 * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
 * day when patching is initiated. Local VM time.
 *
 * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
 * Duration of patching.
 *
 * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
 * Server.
 *
 * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
 * autobackup on SQL virtual machine.
 *
 * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
 * disable encryption for backup on SQL virtual machine.
 *
 * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
 * period of backup: 1-30 days.
 *
 * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
 * account url where backup will be taken to.
 *
 * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
 * account key where backup will be taken to.
 *
 * @param {string} [parameters.autoBackupSettings.password] Password for
 * encryption on backup.
 *
 * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
 * exclude system databases from auto backup.
 *
 * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
 * schedule type. Possible values include: 'Manual', 'Automated'
 *
 * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
 * Frequency of full backups. In both cases, full backups begin during the next
 * scheduled time window. Possible values include: 'Daily', 'Weekly'
 *
 * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
 * time of a given day during which full backups can take place. 0-23 hours.
 *
 * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
 * Duration of the time window of a given day during which full backups can
 * take place. 1-23 hours.
 *
 * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
 * of log backups. 5-60 minutes.
 *
 * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
 * settings.
 *
 * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
 * disable key vault credential setting.
 *
 * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
 * Credential name.
 *
 * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
 * Azure Key Vault url.
 *
 * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
 * Service principal name to access key vault.
 *
 * @param {string}
 * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
 * principal name secret to access key vault.
 *
 * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
 * Server configuration management settings.
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
 * SQL connectivity type settings.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
 * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
 * 'PUBLIC'
 *
 * @param {number}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
 * SQL Server port.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
 * SQL Server sysadmin login to create.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
 * SQL Server sysadmin login password.
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
 * SQL workload type settings.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
 * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
 * SQL storage update settings.
 *
 * @param {number}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
 * Virtual machine disk count.
 *
 * @param {string}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
 * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
 * 'EXTEND', 'ADD'
 *
 * @param {number}
 * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
 * Device id of the first disk to be updated.
 *
 * @param {object}
 * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
 * Additional SQL feature settings.
 *
 * @param {boolean}
 * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
 * Enable or disable R services (SQL 2016 onwards).
 *
 * @param {string} parameters.location Resource location.
 *
 * @param {object} [parameters.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (sqlVirtualMachineName === null || sqlVirtualMachineName === undefined || typeof sqlVirtualMachineName.valueOf() !== 'string') {
      throw new Error('sqlVirtualMachineName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{sqlVirtualMachineName}', encodeURIComponent(sqlVirtualMachineName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['SqlVirtualMachine']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (sqlVirtualMachineName === null || sqlVirtualMachineName === undefined || typeof sqlVirtualMachineName.valueOf() !== 'string') {
      throw new Error('sqlVirtualMachineName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{sqlVirtualMachineName}', encodeURIComponent(sqlVirtualMachineName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates a SQL virtual machine.
 *
 * @param {string} resourceGroupName Name of the resource group that contains
 * the resource. You can obtain this value from the Azure Resource Manager API
 * or the portal.
 *
 * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
 *
 * @param {object} parameters The SQL virtual machine.
 *
 * @param {object} [parameters.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (sqlVirtualMachineName === null || sqlVirtualMachineName === undefined || typeof sqlVirtualMachineName.valueOf() !== 'string') {
      throw new Error('sqlVirtualMachineName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{sqlVirtualMachineName}', encodeURIComponent(sqlVirtualMachineName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['SqlVirtualMachineUpdate']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all SQL virtual machines in a resource group.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all SQL virtual machines in a subscription.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SqlVirtualMachineListResult} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SqlVirtualMachineListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a SqlVirtualMachines. */
class SqlVirtualMachines {
  /**
   * Create a SqlVirtualMachines.
   * @param {SqlVirtualMachineManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._update = _update;
    this._listByResourceGroup = _listByResourceGroup;
    this._list = _list;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._beginUpdate = _beginUpdate;
    this._listByResourceGroupNext = _listByResourceGroupNext;
    this._listNext = _listNext;
  }

  /**
   * Gets a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] The child resources to include in the
   * response.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, sqlVirtualMachineName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] The child resources to include in the
   * response.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, sqlVirtualMachineName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, sqlVirtualMachineName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, sqlVirtualMachineName, options, optionalCallback);
    }
  }

  /**
   * Creates or updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.identity] Azure Active Directory identity of the
   * server.
   *
   * @param {string} [parameters.identity.type] The identity type. Set this to
   * 'SystemAssigned' in order to automatically create and assign an Azure Active
   * Directory principal for the resource. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
   * underlying virtual machine created from SQL marketplace image.
   *
   * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
   * Possible values include: 'PAYG', 'AHUB'
   *
   * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
   * id of the SQL virtual machine group this SQL virtual machine is or will be
   * part of.
   *
   * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
   * setting up Windows Server Failover Cluster for SQL availability group.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
   * bootstrap account password.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
   * operator account password.
   *
   * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
   * SQL service account password.
   *
   * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
   * applying critical security updates to SQL virtual machine.
   *
   * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
   * autopatching on SQL virtual machine.
   *
   * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
   * apply the patch on. Possible values include: 'Monday', 'Tuesday',
   * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
   *
   * @param {number}
   * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
   * day when patching is initiated. Local VM time.
   *
   * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
   * Duration of patching.
   *
   * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
   * Server.
   *
   * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
   * autobackup on SQL virtual machine.
   *
   * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
   * disable encryption for backup on SQL virtual machine.
   *
   * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
   * period of backup: 1-30 days.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
   * account url where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
   * account key where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.password] Password for
   * encryption on backup.
   *
   * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
   * exclude system databases from auto backup.
   *
   * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
   * schedule type. Possible values include: 'Manual', 'Automated'
   *
   * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
   * Frequency of full backups. In both cases, full backups begin during the next
   * scheduled time window. Possible values include: 'Daily', 'Weekly'
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
   * time of a given day during which full backups can take place. 0-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
   * Duration of the time window of a given day during which full backups can
   * take place. 1-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
   * of log backups. 5-60 minutes.
   *
   * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
   * settings.
   *
   * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
   * disable key vault credential setting.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
   * Credential name.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
   * Azure Key Vault url.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
   * Service principal name to access key vault.
   *
   * @param {string}
   * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
   * principal name secret to access key vault.
   *
   * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
   * Server configuration management settings.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
   * SQL connectivity type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
   * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
   * 'PUBLIC'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
   * SQL Server port.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
   * SQL Server sysadmin login to create.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
   * SQL Server sysadmin login password.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
   * SQL workload type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
   * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
   * SQL storage update settings.
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
   * Virtual machine disk count.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
   * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
   * 'EXTEND', 'ADD'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
   * Device id of the first disk to be updated.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
   * Additional SQL feature settings.
   *
   * @param {boolean}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
   * Enable or disable R services (SQL 2016 onwards).
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.identity] Azure Active Directory identity of the
   * server.
   *
   * @param {string} [parameters.identity.type] The identity type. Set this to
   * 'SystemAssigned' in order to automatically create and assign an Azure Active
   * Directory principal for the resource. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
   * underlying virtual machine created from SQL marketplace image.
   *
   * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
   * Possible values include: 'PAYG', 'AHUB'
   *
   * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
   * id of the SQL virtual machine group this SQL virtual machine is or will be
   * part of.
   *
   * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
   * setting up Windows Server Failover Cluster for SQL availability group.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
   * bootstrap account password.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
   * operator account password.
   *
   * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
   * SQL service account password.
   *
   * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
   * applying critical security updates to SQL virtual machine.
   *
   * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
   * autopatching on SQL virtual machine.
   *
   * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
   * apply the patch on. Possible values include: 'Monday', 'Tuesday',
   * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
   *
   * @param {number}
   * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
   * day when patching is initiated. Local VM time.
   *
   * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
   * Duration of patching.
   *
   * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
   * Server.
   *
   * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
   * autobackup on SQL virtual machine.
   *
   * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
   * disable encryption for backup on SQL virtual machine.
   *
   * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
   * period of backup: 1-30 days.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
   * account url where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
   * account key where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.password] Password for
   * encryption on backup.
   *
   * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
   * exclude system databases from auto backup.
   *
   * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
   * schedule type. Possible values include: 'Manual', 'Automated'
   *
   * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
   * Frequency of full backups. In both cases, full backups begin during the next
   * scheduled time window. Possible values include: 'Daily', 'Weekly'
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
   * time of a given day during which full backups can take place. 0-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
   * Duration of the time window of a given day during which full backups can
   * take place. 1-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
   * of log backups. 5-60 minutes.
   *
   * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
   * settings.
   *
   * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
   * disable key vault credential setting.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
   * Credential name.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
   * Azure Key Vault url.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
   * Service principal name to access key vault.
   *
   * @param {string}
   * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
   * principal name secret to access key vault.
   *
   * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
   * Server configuration management settings.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
   * SQL connectivity type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
   * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
   * 'PUBLIC'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
   * SQL Server port.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
   * SQL Server sysadmin login to create.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
   * SQL Server sysadmin login password.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
   * SQL workload type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
   * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
   * SQL storage update settings.
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
   * Virtual machine disk count.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
   * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
   * 'EXTEND', 'ADD'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
   * Device id of the first disk to be updated.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
   * Additional SQL feature settings.
   *
   * @param {boolean}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
   * Enable or disable R services (SQL 2016 onwards).
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, sqlVirtualMachineName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, sqlVirtualMachineName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, sqlVirtualMachineName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, sqlVirtualMachineName, options, optionalCallback);
    }
  }

  /**
   * Updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback);
    }
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Creates or updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.identity] Azure Active Directory identity of the
   * server.
   *
   * @param {string} [parameters.identity.type] The identity type. Set this to
   * 'SystemAssigned' in order to automatically create and assign an Azure Active
   * Directory principal for the resource. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
   * underlying virtual machine created from SQL marketplace image.
   *
   * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
   * Possible values include: 'PAYG', 'AHUB'
   *
   * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
   * id of the SQL virtual machine group this SQL virtual machine is or will be
   * part of.
   *
   * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
   * setting up Windows Server Failover Cluster for SQL availability group.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
   * bootstrap account password.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
   * operator account password.
   *
   * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
   * SQL service account password.
   *
   * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
   * applying critical security updates to SQL virtual machine.
   *
   * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
   * autopatching on SQL virtual machine.
   *
   * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
   * apply the patch on. Possible values include: 'Monday', 'Tuesday',
   * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
   *
   * @param {number}
   * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
   * day when patching is initiated. Local VM time.
   *
   * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
   * Duration of patching.
   *
   * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
   * Server.
   *
   * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
   * autobackup on SQL virtual machine.
   *
   * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
   * disable encryption for backup on SQL virtual machine.
   *
   * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
   * period of backup: 1-30 days.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
   * account url where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
   * account key where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.password] Password for
   * encryption on backup.
   *
   * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
   * exclude system databases from auto backup.
   *
   * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
   * schedule type. Possible values include: 'Manual', 'Automated'
   *
   * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
   * Frequency of full backups. In both cases, full backups begin during the next
   * scheduled time window. Possible values include: 'Daily', 'Weekly'
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
   * time of a given day during which full backups can take place. 0-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
   * Duration of the time window of a given day during which full backups can
   * take place. 1-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
   * of log backups. 5-60 minutes.
   *
   * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
   * settings.
   *
   * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
   * disable key vault credential setting.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
   * Credential name.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
   * Azure Key Vault url.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
   * Service principal name to access key vault.
   *
   * @param {string}
   * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
   * principal name secret to access key vault.
   *
   * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
   * Server configuration management settings.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
   * SQL connectivity type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
   * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
   * 'PUBLIC'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
   * SQL Server port.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
   * SQL Server sysadmin login to create.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
   * SQL Server sysadmin login password.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
   * SQL workload type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
   * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
   * SQL storage update settings.
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
   * Virtual machine disk count.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
   * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
   * 'EXTEND', 'ADD'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
   * Device id of the first disk to be updated.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
   * Additional SQL feature settings.
   *
   * @param {boolean}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
   * Enable or disable R services (SQL 2016 onwards).
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.identity] Azure Active Directory identity of the
   * server.
   *
   * @param {string} [parameters.identity.type] The identity type. Set this to
   * 'SystemAssigned' in order to automatically create and assign an Azure Active
   * Directory principal for the resource. Possible values include:
   * 'SystemAssigned'
   *
   * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
   * underlying virtual machine created from SQL marketplace image.
   *
   * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
   * Possible values include: 'PAYG', 'AHUB'
   *
   * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
   * id of the SQL virtual machine group this SQL virtual machine is or will be
   * part of.
   *
   * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
   * setting up Windows Server Failover Cluster for SQL availability group.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
   * bootstrap account password.
   *
   * @param {string}
   * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
   * operator account password.
   *
   * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
   * SQL service account password.
   *
   * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
   * applying critical security updates to SQL virtual machine.
   *
   * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
   * autopatching on SQL virtual machine.
   *
   * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
   * apply the patch on. Possible values include: 'Monday', 'Tuesday',
   * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
   *
   * @param {number}
   * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
   * day when patching is initiated. Local VM time.
   *
   * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
   * Duration of patching.
   *
   * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
   * Server.
   *
   * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
   * autobackup on SQL virtual machine.
   *
   * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
   * disable encryption for backup on SQL virtual machine.
   *
   * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
   * period of backup: 1-30 days.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
   * account url where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
   * account key where backup will be taken to.
   *
   * @param {string} [parameters.autoBackupSettings.password] Password for
   * encryption on backup.
   *
   * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
   * exclude system databases from auto backup.
   *
   * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
   * schedule type. Possible values include: 'Manual', 'Automated'
   *
   * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
   * Frequency of full backups. In both cases, full backups begin during the next
   * scheduled time window. Possible values include: 'Daily', 'Weekly'
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
   * time of a given day during which full backups can take place. 0-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
   * Duration of the time window of a given day during which full backups can
   * take place. 1-23 hours.
   *
   * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
   * of log backups. 5-60 minutes.
   *
   * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
   * settings.
   *
   * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
   * disable key vault credential setting.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
   * Credential name.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
   * Azure Key Vault url.
   *
   * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
   * Service principal name to access key vault.
   *
   * @param {string}
   * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
   * principal name secret to access key vault.
   *
   * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
   * Server configuration management settings.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
   * SQL connectivity type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
   * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
   * 'PUBLIC'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
   * SQL Server port.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
   * SQL Server sysadmin login to create.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
   * SQL Server sysadmin login password.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
   * SQL workload type settings.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
   * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
   * SQL storage update settings.
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
   * Virtual machine disk count.
   *
   * @param {string}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
   * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
   * 'EXTEND', 'ADD'
   *
   * @param {number}
   * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
   * Device id of the first disk to be updated.
   *
   * @param {object}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
   * Additional SQL feature settings.
   *
   * @param {boolean}
   * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
   * Enable or disable R services (SQL 2016 onwards).
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options, optionalCallback);
    }
  }

  /**
   * Updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginUpdateWithHttpOperationResponse(resourceGroupName, sqlVirtualMachineName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates a SQL virtual machine.
   *
   * @param {string} resourceGroupName Name of the resource group that contains
   * the resource. You can obtain this value from the Azure Resource Manager API
   * or the portal.
   *
   * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
   *
   * @param {object} parameters The SQL virtual machine.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options, optionalCallback);
    }
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all SQL virtual machines in a resource group.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all SQL virtual machines in a subscription.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SqlVirtualMachineListResult} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = SqlVirtualMachines;
