/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * AvailabilityGroupListeners
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlVirtualMachineManagementClient.
 */
export interface AvailabilityGroupListeners {


    /**
     * Gets an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailabilityGroupListener>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailabilityGroupListener>>;

    /**
     * Gets an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailabilityGroupListener} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailabilityGroupListener} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailabilityGroupListener} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailabilityGroupListener>;
    get(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, callback: ServiceCallback<models.AvailabilityGroupListener>): void;
    get(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailabilityGroupListener>): void;


    /**
     * Creates or updates an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} parameters The availability group listener.
     *
     * @param {string} [parameters.availabilityGroupName] Name of the availability
     * group.
     *
     * @param {array} [parameters.loadBalancerConfigurations] List of load balancer
     * configurations for an availability group listener.
     *
     * @param {boolean} [parameters.createDefaultAvailabilityGroupIfNotExist]
     * Create a default availability group if it does not exist.
     *
     * @param {number} [parameters.port] Listener port.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailabilityGroupListener>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailabilityGroupListener>>;

    /**
     * Creates or updates an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} parameters The availability group listener.
     *
     * @param {string} [parameters.availabilityGroupName] Name of the availability
     * group.
     *
     * @param {array} [parameters.loadBalancerConfigurations] List of load balancer
     * configurations for an availability group listener.
     *
     * @param {boolean} [parameters.createDefaultAvailabilityGroupIfNotExist]
     * Create a default availability group if it does not exist.
     *
     * @param {number} [parameters.port] Listener port.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailabilityGroupListener} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailabilityGroupListener} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailabilityGroupListener} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailabilityGroupListener>;
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, callback: ServiceCallback<models.AvailabilityGroupListener>): void;
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailabilityGroupListener>): void;


    /**
     * Deletes an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailabilityGroupListenerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByGroupWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailabilityGroupListenerListResult>>;

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailabilityGroupListenerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailabilityGroupListenerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailabilityGroupListenerListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByGroup(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailabilityGroupListenerListResult>;
    listByGroup(resourceGroupName: string, sqlVirtualMachineGroupName: string, callback: ServiceCallback<models.AvailabilityGroupListenerListResult>): void;
    listByGroup(resourceGroupName: string, sqlVirtualMachineGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailabilityGroupListenerListResult>): void;


    /**
     * Creates or updates an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} parameters The availability group listener.
     *
     * @param {string} [parameters.availabilityGroupName] Name of the availability
     * group.
     *
     * @param {array} [parameters.loadBalancerConfigurations] List of load balancer
     * configurations for an availability group listener.
     *
     * @param {boolean} [parameters.createDefaultAvailabilityGroupIfNotExist]
     * Create a default availability group if it does not exist.
     *
     * @param {number} [parameters.port] Listener port.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailabilityGroupListener>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailabilityGroupListener>>;

    /**
     * Creates or updates an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} parameters The availability group listener.
     *
     * @param {string} [parameters.availabilityGroupName] Name of the availability
     * group.
     *
     * @param {array} [parameters.loadBalancerConfigurations] List of load balancer
     * configurations for an availability group listener.
     *
     * @param {boolean} [parameters.createDefaultAvailabilityGroupIfNotExist]
     * Create a default availability group if it does not exist.
     *
     * @param {number} [parameters.port] Listener port.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailabilityGroupListener} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailabilityGroupListener} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailabilityGroupListener} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailabilityGroupListener>;
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, callback: ServiceCallback<models.AvailabilityGroupListener>): void;
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, parameters: models.AvailabilityGroupListener, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailabilityGroupListener>): void;


    /**
     * Deletes an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an availability group listener.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {string} availabilityGroupListenerName Name of the availability group
     * listener.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, availabilityGroupListenerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailabilityGroupListenerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailabilityGroupListenerListResult>>;

    /**
     * Lists all availability group listeners in a SQL virtual machine group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailabilityGroupListenerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailabilityGroupListenerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailabilityGroupListenerListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailabilityGroupListenerListResult>;
    listByGroupNext(nextPageLink: string, callback: ServiceCallback<models.AvailabilityGroupListenerListResult>): void;
    listByGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailabilityGroupListenerListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlVirtualMachineManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * SqlVirtualMachineGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlVirtualMachineManagementClient.
 */
export interface SqlVirtualMachineGroups {


    /**
     * Gets a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroup>>;

    /**
     * Gets a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroup>;
    get(resourceGroupName: string, sqlVirtualMachineGroupName: string, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;
    get(resourceGroupName: string, sqlVirtualMachineGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;


    /**
     * Creates or updates a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {string} [parameters.sqlImageOffer] SQL image offer. Examples may
     * include SQL2016-WS2016, SQL2017-WS2016.
     *
     * @param {string} [parameters.sqlImageSku] SQL image sku. Possible values
     * include: 'Developer', 'Enterprise'
     *
     * @param {object} [parameters.wsfcDomainProfile] Cluster Active Directory
     * domain profile.
     *
     * @param {string} [parameters.wsfcDomainProfile.domainFqdn] Fully qualified
     * name of the domain.
     *
     * @param {string} [parameters.wsfcDomainProfile.ouPath] Organizational Unit
     * path in which the nodes and cluster will be present.
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterBootstrapAccount]
     * Account name used for creating cluster (at minimum needs permissions to
     * 'Create Computer Objects' in domain).
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterOperatorAccount]
     * Account name used for operating cluster i.e. will be part of administrators
     * group on all the participating virtual machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.sqlServiceAccount] Account
     * name under which SQL service will run on all participating SQL virtual
     * machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.fileShareWitnessPath] Optional
     * path for fileshare witness.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountUrl] Fully
     * qualified ARM resource id of the witness storage account.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountPrimaryKey]
     * Primary key of the witness storage account.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroup>>;

    /**
     * Creates or updates a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {string} [parameters.sqlImageOffer] SQL image offer. Examples may
     * include SQL2016-WS2016, SQL2017-WS2016.
     *
     * @param {string} [parameters.sqlImageSku] SQL image sku. Possible values
     * include: 'Developer', 'Enterprise'
     *
     * @param {object} [parameters.wsfcDomainProfile] Cluster Active Directory
     * domain profile.
     *
     * @param {string} [parameters.wsfcDomainProfile.domainFqdn] Fully qualified
     * name of the domain.
     *
     * @param {string} [parameters.wsfcDomainProfile.ouPath] Organizational Unit
     * path in which the nodes and cluster will be present.
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterBootstrapAccount]
     * Account name used for creating cluster (at minimum needs permissions to
     * 'Create Computer Objects' in domain).
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterOperatorAccount]
     * Account name used for operating cluster i.e. will be part of administrators
     * group on all the participating virtual machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.sqlServiceAccount] Account
     * name under which SQL service will run on all participating SQL virtual
     * machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.fileShareWitnessPath] Optional
     * path for fileshare witness.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountUrl] Fully
     * qualified ARM resource id of the witness storage account.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountPrimaryKey]
     * Primary key of the witness storage account.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroup>;
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;


    /**
     * Deletes a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates SQL virtual machine group tags.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroup>>;

    /**
     * Updates SQL virtual machine group tags.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroup>;
    update(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;
    update(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;


    /**
     * Gets all SQL virtual machine groups in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroupListResult>>;

    /**
     * Gets all SQL virtual machine groups in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroupListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;


    /**
     * Gets all SQL virtual machine groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroupListResult>>;

    /**
     * Gets all SQL virtual machine groups in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroupListResult>;
    list(callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;


    /**
     * Creates or updates a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {string} [parameters.sqlImageOffer] SQL image offer. Examples may
     * include SQL2016-WS2016, SQL2017-WS2016.
     *
     * @param {string} [parameters.sqlImageSku] SQL image sku. Possible values
     * include: 'Developer', 'Enterprise'
     *
     * @param {object} [parameters.wsfcDomainProfile] Cluster Active Directory
     * domain profile.
     *
     * @param {string} [parameters.wsfcDomainProfile.domainFqdn] Fully qualified
     * name of the domain.
     *
     * @param {string} [parameters.wsfcDomainProfile.ouPath] Organizational Unit
     * path in which the nodes and cluster will be present.
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterBootstrapAccount]
     * Account name used for creating cluster (at minimum needs permissions to
     * 'Create Computer Objects' in domain).
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterOperatorAccount]
     * Account name used for operating cluster i.e. will be part of administrators
     * group on all the participating virtual machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.sqlServiceAccount] Account
     * name under which SQL service will run on all participating SQL virtual
     * machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.fileShareWitnessPath] Optional
     * path for fileshare witness.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountUrl] Fully
     * qualified ARM resource id of the witness storage account.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountPrimaryKey]
     * Primary key of the witness storage account.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroup>>;

    /**
     * Creates or updates a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {string} [parameters.sqlImageOffer] SQL image offer. Examples may
     * include SQL2016-WS2016, SQL2017-WS2016.
     *
     * @param {string} [parameters.sqlImageSku] SQL image sku. Possible values
     * include: 'Developer', 'Enterprise'
     *
     * @param {object} [parameters.wsfcDomainProfile] Cluster Active Directory
     * domain profile.
     *
     * @param {string} [parameters.wsfcDomainProfile.domainFqdn] Fully qualified
     * name of the domain.
     *
     * @param {string} [parameters.wsfcDomainProfile.ouPath] Organizational Unit
     * path in which the nodes and cluster will be present.
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterBootstrapAccount]
     * Account name used for creating cluster (at minimum needs permissions to
     * 'Create Computer Objects' in domain).
     *
     * @param {string} [parameters.wsfcDomainProfile.clusterOperatorAccount]
     * Account name used for operating cluster i.e. will be part of administrators
     * group on all the participating virtual machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.sqlServiceAccount] Account
     * name under which SQL service will run on all participating SQL virtual
     * machines in the cluster.
     *
     * @param {string} [parameters.wsfcDomainProfile.fileShareWitnessPath] Optional
     * path for fileshare witness.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountUrl] Fully
     * qualified ARM resource id of the witness storage account.
     *
     * @param {string} [parameters.wsfcDomainProfile.storageAccountPrimaryKey]
     * Primary key of the witness storage account.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroup>;
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;


    /**
     * Deletes a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a SQL virtual machine group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates SQL virtual machine group tags.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroup>>;

    /**
     * Updates SQL virtual machine group tags.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineGroupName Name of the SQL virtual machine
     * group.
     *
     * @param {object} parameters The SQL virtual machine group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroup>;
    beginUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;
    beginUpdate(resourceGroupName: string, sqlVirtualMachineGroupName: string, parameters: models.SqlVirtualMachineGroupUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroup>): void;


    /**
     * Gets all SQL virtual machine groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroupListResult>>;

    /**
     * Gets all SQL virtual machine groups in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroupListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;


    /**
     * Gets all SQL virtual machine groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineGroupListResult>>;

    /**
     * Gets all SQL virtual machine groups in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineGroupListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineGroupListResult>): void;
}

/**
 * @class
 * SqlVirtualMachines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlVirtualMachineManagementClient.
 */
export interface SqlVirtualMachines {


    /**
     * Gets a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] The child resources to include in the
     * response.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachine>>;

    /**
     * Gets a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] The child resources to include in the
     * response.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, sqlVirtualMachineName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachine>;
    get(resourceGroupName: string, sqlVirtualMachineName: string, callback: ServiceCallback<models.SqlVirtualMachine>): void;
    get(resourceGroupName: string, sqlVirtualMachineName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachine>): void;


    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.identity] Azure Active Directory identity of the
     * server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
     * underlying virtual machine created from SQL marketplace image.
     *
     * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
     * Possible values include: 'PAYG', 'AHUB'
     *
     * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
     * id of the SQL virtual machine group this SQL virtual machine is or will be
     * part of.
     *
     * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
     * setting up Windows Server Failover Cluster for SQL availability group.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
     * bootstrap account password.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
     * operator account password.
     *
     * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
     * SQL service account password.
     *
     * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
     * applying critical security updates to SQL virtual machine.
     *
     * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
     * autopatching on SQL virtual machine.
     *
     * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
     * apply the patch on. Possible values include: 'Monday', 'Tuesday',
     * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
     *
     * @param {number}
     * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
     * day when patching is initiated. Local VM time.
     *
     * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
     * Duration of patching.
     *
     * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
     * Server.
     *
     * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
     * autobackup on SQL virtual machine.
     *
     * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
     * disable encryption for backup on SQL virtual machine.
     *
     * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
     * period of backup: 1-30 days.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
     * account url where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
     * account key where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.password] Password for
     * encryption on backup.
     *
     * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
     * exclude system databases from auto backup.
     *
     * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
     * schedule type. Possible values include: 'Manual', 'Automated'
     *
     * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
     * Frequency of full backups. In both cases, full backups begin during the next
     * scheduled time window. Possible values include: 'Daily', 'Weekly'
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
     * time of a given day during which full backups can take place. 0-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
     * Duration of the time window of a given day during which full backups can
     * take place. 1-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
     * of log backups. 5-60 minutes.
     *
     * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
     * settings.
     *
     * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
     * disable key vault credential setting.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
     * Credential name.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
     * Azure Key Vault url.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
     * Service principal name to access key vault.
     *
     * @param {string}
     * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
     * principal name secret to access key vault.
     *
     * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
     * Server configuration management settings.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
     * SQL connectivity type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
     * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
     * 'PUBLIC'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
     * SQL Server port.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
     * SQL Server sysadmin login to create.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
     * SQL Server sysadmin login password.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
     * SQL workload type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
     * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
     * SQL storage update settings.
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
     * Virtual machine disk count.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
     * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
     * 'EXTEND', 'ADD'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
     * Device id of the first disk to be updated.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
     * Additional SQL feature settings.
     *
     * @param {boolean}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
     * Enable or disable R services (SQL 2016 onwards).
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachine>>;

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.identity] Azure Active Directory identity of the
     * server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
     * underlying virtual machine created from SQL marketplace image.
     *
     * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
     * Possible values include: 'PAYG', 'AHUB'
     *
     * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
     * id of the SQL virtual machine group this SQL virtual machine is or will be
     * part of.
     *
     * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
     * setting up Windows Server Failover Cluster for SQL availability group.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
     * bootstrap account password.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
     * operator account password.
     *
     * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
     * SQL service account password.
     *
     * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
     * applying critical security updates to SQL virtual machine.
     *
     * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
     * autopatching on SQL virtual machine.
     *
     * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
     * apply the patch on. Possible values include: 'Monday', 'Tuesday',
     * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
     *
     * @param {number}
     * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
     * day when patching is initiated. Local VM time.
     *
     * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
     * Duration of patching.
     *
     * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
     * Server.
     *
     * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
     * autobackup on SQL virtual machine.
     *
     * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
     * disable encryption for backup on SQL virtual machine.
     *
     * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
     * period of backup: 1-30 days.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
     * account url where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
     * account key where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.password] Password for
     * encryption on backup.
     *
     * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
     * exclude system databases from auto backup.
     *
     * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
     * schedule type. Possible values include: 'Manual', 'Automated'
     *
     * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
     * Frequency of full backups. In both cases, full backups begin during the next
     * scheduled time window. Possible values include: 'Daily', 'Weekly'
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
     * time of a given day during which full backups can take place. 0-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
     * Duration of the time window of a given day during which full backups can
     * take place. 1-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
     * of log backups. 5-60 minutes.
     *
     * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
     * settings.
     *
     * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
     * disable key vault credential setting.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
     * Credential name.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
     * Azure Key Vault url.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
     * Service principal name to access key vault.
     *
     * @param {string}
     * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
     * principal name secret to access key vault.
     *
     * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
     * Server configuration management settings.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
     * SQL connectivity type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
     * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
     * 'PUBLIC'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
     * SQL Server port.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
     * SQL Server sysadmin login to create.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
     * SQL Server sysadmin login password.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
     * SQL workload type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
     * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
     * SQL storage update settings.
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
     * Virtual machine disk count.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
     * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
     * 'EXTEND', 'ADD'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
     * Device id of the first disk to be updated.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
     * Additional SQL feature settings.
     *
     * @param {boolean}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
     * Enable or disable R services (SQL 2016 onwards).
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachine>;
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, callback: ServiceCallback<models.SqlVirtualMachine>): void;
    createOrUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachine>): void;


    /**
     * Deletes a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, sqlVirtualMachineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, sqlVirtualMachineName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, sqlVirtualMachineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachine>>;

    /**
     * Updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachine>;
    update(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, callback: ServiceCallback<models.SqlVirtualMachine>): void;
    update(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachine>): void;


    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineListResult>>;

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;


    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineListResult>>;

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineListResult>;
    list(callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;


    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.identity] Azure Active Directory identity of the
     * server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
     * underlying virtual machine created from SQL marketplace image.
     *
     * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
     * Possible values include: 'PAYG', 'AHUB'
     *
     * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
     * id of the SQL virtual machine group this SQL virtual machine is or will be
     * part of.
     *
     * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
     * setting up Windows Server Failover Cluster for SQL availability group.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
     * bootstrap account password.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
     * operator account password.
     *
     * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
     * SQL service account password.
     *
     * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
     * applying critical security updates to SQL virtual machine.
     *
     * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
     * autopatching on SQL virtual machine.
     *
     * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
     * apply the patch on. Possible values include: 'Monday', 'Tuesday',
     * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
     *
     * @param {number}
     * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
     * day when patching is initiated. Local VM time.
     *
     * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
     * Duration of patching.
     *
     * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
     * Server.
     *
     * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
     * autobackup on SQL virtual machine.
     *
     * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
     * disable encryption for backup on SQL virtual machine.
     *
     * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
     * period of backup: 1-30 days.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
     * account url where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
     * account key where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.password] Password for
     * encryption on backup.
     *
     * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
     * exclude system databases from auto backup.
     *
     * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
     * schedule type. Possible values include: 'Manual', 'Automated'
     *
     * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
     * Frequency of full backups. In both cases, full backups begin during the next
     * scheduled time window. Possible values include: 'Daily', 'Weekly'
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
     * time of a given day during which full backups can take place. 0-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
     * Duration of the time window of a given day during which full backups can
     * take place. 1-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
     * of log backups. 5-60 minutes.
     *
     * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
     * settings.
     *
     * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
     * disable key vault credential setting.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
     * Credential name.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
     * Azure Key Vault url.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
     * Service principal name to access key vault.
     *
     * @param {string}
     * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
     * principal name secret to access key vault.
     *
     * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
     * Server configuration management settings.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
     * SQL connectivity type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
     * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
     * 'PUBLIC'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
     * SQL Server port.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
     * SQL Server sysadmin login to create.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
     * SQL Server sysadmin login password.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
     * SQL workload type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
     * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
     * SQL storage update settings.
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
     * Virtual machine disk count.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
     * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
     * 'EXTEND', 'ADD'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
     * Device id of the first disk to be updated.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
     * Additional SQL feature settings.
     *
     * @param {boolean}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
     * Enable or disable R services (SQL 2016 onwards).
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachine>>;

    /**
     * Creates or updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.identity] Azure Active Directory identity of the
     * server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.virtualMachineResourceId] ARM Resource id of
     * underlying virtual machine created from SQL marketplace image.
     *
     * @param {string} [parameters.sqlServerLicenseType] SQL Server license type.
     * Possible values include: 'PAYG', 'AHUB'
     *
     * @param {string} [parameters.sqlVirtualMachineGroupResourceId] ARM resource
     * id of the SQL virtual machine group this SQL virtual machine is or will be
     * part of.
     *
     * @param {object} [parameters.wsfcDomainCredentials] Domain credentials for
     * setting up Windows Server Failover Cluster for SQL availability group.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterBootstrapAccountPassword] Cluster
     * bootstrap account password.
     *
     * @param {string}
     * [parameters.wsfcDomainCredentials.clusterOperatorAccountPassword] Cluster
     * operator account password.
     *
     * @param {string} [parameters.wsfcDomainCredentials.sqlServiceAccountPassword]
     * SQL service account password.
     *
     * @param {object} [parameters.autoPatchingSettings] Auto patching settings for
     * applying critical security updates to SQL virtual machine.
     *
     * @param {boolean} [parameters.autoPatchingSettings.enable] Enable or disable
     * autopatching on SQL virtual machine.
     *
     * @param {string} [parameters.autoPatchingSettings.dayOfWeek] Day of week to
     * apply the patch on. Possible values include: 'Monday', 'Tuesday',
     * 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
     *
     * @param {number}
     * [parameters.autoPatchingSettings.maintenanceWindowStartingHour] Hour of the
     * day when patching is initiated. Local VM time.
     *
     * @param {number} [parameters.autoPatchingSettings.maintenanceWindowDuration]
     * Duration of patching.
     *
     * @param {object} [parameters.autoBackupSettings] Auto backup settings for SQL
     * Server.
     *
     * @param {boolean} [parameters.autoBackupSettings.enable] Enable or disable
     * autobackup on SQL virtual machine.
     *
     * @param {boolean} [parameters.autoBackupSettings.enableEncryption] Enable or
     * disable encryption for backup on SQL virtual machine.
     *
     * @param {number} [parameters.autoBackupSettings.retentionPeriod] Retention
     * period of backup: 1-30 days.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccountUrl] Storage
     * account url where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.storageAccessKey] Storage
     * account key where backup will be taken to.
     *
     * @param {string} [parameters.autoBackupSettings.password] Password for
     * encryption on backup.
     *
     * @param {boolean} [parameters.autoBackupSettings.backupSystemDbs] Include or
     * exclude system databases from auto backup.
     *
     * @param {string} [parameters.autoBackupSettings.backupScheduleType] Backup
     * schedule type. Possible values include: 'Manual', 'Automated'
     *
     * @param {string} [parameters.autoBackupSettings.fullBackupFrequency]
     * Frequency of full backups. In both cases, full backups begin during the next
     * scheduled time window. Possible values include: 'Daily', 'Weekly'
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupStartTime] Start
     * time of a given day during which full backups can take place. 0-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.fullBackupWindowHours]
     * Duration of the time window of a given day during which full backups can
     * take place. 1-23 hours.
     *
     * @param {number} [parameters.autoBackupSettings.logBackupFrequency] Frequency
     * of log backups. 5-60 minutes.
     *
     * @param {object} [parameters.keyVaultCredentialSettings] Key vault credential
     * settings.
     *
     * @param {boolean} [parameters.keyVaultCredentialSettings.enable] Enable or
     * disable key vault credential setting.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.credentialName]
     * Credential name.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.azureKeyVaultUrl]
     * Azure Key Vault url.
     *
     * @param {string} [parameters.keyVaultCredentialSettings.servicePrincipalName]
     * Service principal name to access key vault.
     *
     * @param {string}
     * [parameters.keyVaultCredentialSettings.servicePrincipalSecret] Service
     * principal name secret to access key vault.
     *
     * @param {object} [parameters.serverConfigurationsManagementSettings] SQL
     * Server configuration management settings.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings]
     * SQL connectivity type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.connectivityType]
     * SQL Server connectivity option. Possible values include: 'LOCAL', 'PRIVATE',
     * 'PUBLIC'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.port]
     * SQL Server port.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdateUserName]
     * SQL Server sysadmin login to create.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlConnectivityUpdateSettings.sqlAuthUpdatePassword]
     * SQL Server sysadmin login password.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings]
     * SQL workload type settings.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlWorkloadTypeUpdateSettings.sqlWorkloadType]
     * SQL Server workload type. Possible values include: 'GENERAL', 'OLTP', 'DW'
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings]
     * SQL storage update settings.
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskCount]
     * Virtual machine disk count.
     *
     * @param {string}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.diskConfigurationType]
     * Disk configuration to apply to SQL Server. Possible values include: 'NEW',
     * 'EXTEND', 'ADD'
     *
     * @param {number}
     * [parameters.serverConfigurationsManagementSettings.sqlStorageUpdateSettings.startingDeviceId]
     * Device id of the first disk to be updated.
     *
     * @param {object}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations]
     * Additional SQL feature settings.
     *
     * @param {boolean}
     * [parameters.serverConfigurationsManagementSettings.additionalFeaturesServerConfigurations.isRServicesEnabled]
     * Enable or disable R services (SQL 2016 onwards).
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachine>;
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, callback: ServiceCallback<models.SqlVirtualMachine>): void;
    beginCreateOrUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachine, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachine>): void;


    /**
     * Deletes a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, sqlVirtualMachineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachine>>;

    /**
     * Updates a SQL virtual machine.
     *
     * @param {string} resourceGroupName Name of the resource group that contains
     * the resource. You can obtain this value from the Azure Resource Manager API
     * or the portal.
     *
     * @param {string} sqlVirtualMachineName Name of the SQL virtual machine.
     *
     * @param {object} parameters The SQL virtual machine.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachine>;
    beginUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, callback: ServiceCallback<models.SqlVirtualMachine>): void;
    beginUpdate(resourceGroupName: string, sqlVirtualMachineName: string, parameters: models.SqlVirtualMachineUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachine>): void;


    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineListResult>>;

    /**
     * Gets all SQL virtual machines in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;


    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SqlVirtualMachineListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SqlVirtualMachineListResult>>;

    /**
     * Gets all SQL virtual machines in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SqlVirtualMachineListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SqlVirtualMachineListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SqlVirtualMachineListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SqlVirtualMachineListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SqlVirtualMachineListResult>): void;
}
