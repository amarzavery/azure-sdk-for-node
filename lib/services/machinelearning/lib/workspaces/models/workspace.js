/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object that represents a machine learning workspace.
 *
 * @extends models['Resource']
 */
class Workspace extends models['Resource'] {
  /**
   * Create a Workspace.
   * @property {string} userStorageAccountId The fully qualified arm id of the
   * storage account associated with this workspace.
   * @property {string} [ownerEmail] The email id of the owner for this
   * workspace.
   * @property {string} [workspaceType] The type of this workspace. Possible
   * values include: 'Production', 'Free', 'Anonymous', 'PaidStandard',
   * 'PaidPremium'
   * @property {string} [workspaceState] The current state of workspace
   * resource. Possible values include: 'Deleted', 'Enabled', 'Disabled',
   * 'Migrated', 'Updated', 'Registered', 'Unregistered'
   * @property {string} [workspaceId] The immutable id associated with this
   * workspace.
   * @property {string} [creationTime] The creation time for this workspace
   * resource.
   * @property {string} [studioEndpoint] The regional endpoint for the machine
   * learning studio service which hosts this workspace.
   * @property {string} [keyVaultIdentifierId] The key vault identifier used
   * for encrypted workspaces.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Workspace
   *
   * @returns {object} metadata of Workspace
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Workspace',
      type: {
        name: 'Composite',
        className: 'Workspace',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          userStorageAccountId: {
            required: true,
            serializedName: 'properties.userStorageAccountId',
            type: {
              name: 'String'
            }
          },
          ownerEmail: {
            required: false,
            serializedName: 'properties.ownerEmail',
            type: {
              name: 'String'
            }
          },
          workspaceType: {
            required: false,
            readOnly: true,
            serializedName: 'properties.workspaceType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Production', 'Free', 'Anonymous', 'PaidStandard', 'PaidPremium' ]
            }
          },
          workspaceState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.workspaceState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Deleted', 'Enabled', 'Disabled', 'Migrated', 'Updated', 'Registered', 'Unregistered' ]
            }
          },
          workspaceId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.workspaceId',
            type: {
              name: 'String'
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'String'
            }
          },
          studioEndpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.studioEndpoint',
            type: {
              name: 'String'
            }
          },
          keyVaultIdentifierId: {
            required: false,
            serializedName: 'properties.keyVaultIdentifierId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Workspace;
