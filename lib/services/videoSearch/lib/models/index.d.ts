/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

export interface ResponseBase {
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines the identity of a resource.
*/
export interface Identifiable extends ResponseBase {
  /**
   * A String identifier.
  */
  readonly id?: string;
}

/**
 * Defines a response. All schemas that could be returned at the root of a response should inherit
 * from this
*/
export interface Response extends Identifiable {
  /**
   * The URL To Bing's search result for this item.
  */
  readonly webSearchUrl?: string;
}

export interface Thing extends Response {
  /**
   * The name of the thing represented by this object.
  */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
  */
  readonly url?: string;
  readonly image?: ImageObject;
  /**
   * A short description of the item.
  */
  readonly description?: string;
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
  */
  readonly bingId?: string;
}

export interface CreativeWork extends Thing {
  /**
   * The URL to a thumbnail of the item.
  */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
  */
  readonly provider?: Thing[];
  readonly text?: string;
}

export interface MediaObject extends CreativeWork {
  /**
   * Original URL to retrieve the source (file) for the media object (e.g the source URL for the
   * image).
  */
  readonly contentUrl?: string;
  /**
   * URL of the page that hosts the media object.
  */
  readonly hostPageUrl?: string;
  /**
   * The width of the source media object, in pixels.
  */
  readonly width?: number;
  /**
   * The height of the source media object, in pixels.
  */
  readonly height?: number;
}

/**
 * Defines an image
*/
export interface ImageObject extends MediaObject {
  /**
   * The URL to a thumbnail of the image
  */
  readonly thumbnail?: ImageObject;
}

/**
 * Defines a video object that is relevant to the query.
*/
export interface VideoObject extends MediaObject {
  readonly motionThumbnailUrl?: string;
  readonly motionThumbnailId?: string;
  readonly embedHtml?: string;
  readonly allowHttpsEmbed?: boolean;
  readonly viewCount?: number;
  readonly thumbnail?: ImageObject;
  readonly videoId?: string;
  readonly allowMobileEmbed?: boolean;
  readonly isSuperfresh?: boolean;
}

/**
 * Defines a search query.
*/
export interface Query {
  /**
   * The query string. Use this string as the query term in a new search request.
  */
  text: string;
  /**
   * The display version of the query term. This version of the query term may contain special
   * characters that highlight the search term found in the query string. The string contains the
   * highlighting characters only if the query enabled hit highlighting
  */
  readonly displayText?: string;
  /**
   * The URL that takes the user to the Bing search results page for the query.Only related search
   * results include this field.
  */
  readonly webSearchUrl?: string;
  readonly searchLink?: string;
  readonly thumbnail?: ImageObject;
}

export interface PivotSuggestions {
  pivot: string;
  suggestions: Query[];
}

export interface Answer extends Response {
  readonly followUpQueries?: Query[];
}

export interface SearchResultsAnswer extends Answer {
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
  */
  readonly totalEstimatedMatches?: number;
  readonly isFamilyFriendly?: boolean;
}

/**
 * Defines a video answer.
*/
export interface Videos extends SearchResultsAnswer {
  /**
   * A list of video objects that are relevant to the query.
  */
  value: VideoObject[];
  readonly nextOffset?: number;
  /**
   * Possible values include: 'List', 'SingleDominantVideo'
  */
  readonly scenario?: string;
  readonly queryExpansions?: Query[];
  readonly pivotSuggestions?: PivotSuggestions[];
}

/**
 * Defines the query context that Bing used for the request.
*/
export interface QueryContext {
  /**
   * The query string as specified in the request.
  */
  originalQuery: string;
  /**
   * The query string used by Bing to perform the query. Bing uses the altered query string if the
   * original query string contained spelling mistakes. For example, if the query string is "saling
   * downwind", the altered query string will be "sailing downwind". This field is included only if
   * the original query string contains a spelling mistake.
  */
  readonly alteredQuery?: string;
  /**
   * The query string to use to force Bing to use the original string. For example, if the query
   * string is "saling downwind", the override query string will be "+saling downwind". Remember to
   * encode the query string which results in "%2Bsaling+downwind". This field is included only if
   * the original query string contains a spelling mistake.
  */
  readonly alterationOverrideQuery?: string;
  /**
   * A Boolean value that indicates whether the specified query has adult intent. The value is true
   * if the query has adult intent; otherwise, false.
  */
  readonly adultIntent?: boolean;
  /**
   * A Boolean value that indicates whether Bing requires the user's location to provide accurate
   * results. If you specified the user's location by using the X-MSEdge-ClientIP and
   * X-Search-Location headers, you can ignore this field. For location aware queries, such as
   * "today's weather" or "restaurants near me" that need the user's location to provide accurate
   * results, this field is set to true. For location aware queries that include the location (for
   * example, "Seattle weather"), this field is set to false. This field is also set to false for
   * queries that are not location aware, such as "best sellers".
  */
  readonly askUserForLocation?: boolean;
  readonly isTransactional?: boolean;
}

/**
 * Defines the error that occurred.
*/
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'
  */
  code: string;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
  */
  readonly subCode?: string;
  /**
   * A description of the error.
  */
  message: string;
  /**
   * A description that provides additional information about the error.
  */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
  */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
  */
  readonly value?: string;
}

/**
 * The top-level response that represents a failed request.
*/
export interface ErrorResponse extends Response {
  /**
   * A list of errors that describe the reasons why the request failed.
  */
  errors: ErrorModel[];
}

export interface TrendingVideosTile {
  query: Query;
  image: ImageObject;
}

export interface TrendingVideosSubcategory {
  title: string;
  tiles: TrendingVideosTile[];
}

export interface TrendingVideosCategory {
  title: string;
  subcategories: TrendingVideosSubcategory[];
}

export interface TrendingVideos extends Response {
  bannerTiles: TrendingVideosTile[];
  categories: TrendingVideosCategory[];
}

export interface VideosModule {
  readonly value?: VideoObject[];
}

export interface VideoDetails extends Response {
  readonly relatedVideos?: VideosModule;
  readonly videoResult?: VideoObject;
}
