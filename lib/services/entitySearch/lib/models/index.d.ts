/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Defines the query context that Bing used for the request.
 */
export interface QueryContext {
  /**
   * The query string as specified in the request.
   */
  originalQuery: string;
  /**
   * The query string used by Bing to perform the query. Bing uses the altered query string if the
   * original query string contained spelling mistakes. For example, if the query string is "saling
   * downwind", the altered query string will be "sailing downwind". This field is included only if
   * the original query string contains a spelling mistake.
   */
  readonly alteredQuery?: string;
  /**
   * The query string to use to force Bing to use the original string. For example, if the query
   * string is "saling downwind", the override query string will be "+saling downwind". Remember to
   * encode the query string which results in "%2Bsaling+downwind". This field is included only if
   * the original query string contains a spelling mistake.
   */
  readonly alterationOverrideQuery?: string;
  /**
   * A Boolean value that indicates whether the specified query has adult intent. The value is true
   * if the query has adult intent; otherwise, false.
   */
  readonly adultIntent?: boolean;
  /**
   * A Boolean value that indicates whether Bing requires the user's location to provide accurate
   * results. If you specified the user's location by using the X-MSEdge-ClientIP and
   * X-Search-Location headers, you can ignore this field. For location aware queries, such as
   * "today's weather" or "restaurants near me" that need the user's location to provide accurate
   * results, this field is set to true. For location aware queries that include the location (for
   * example, "Seattle weather"), this field is set to false. This field is also set to false for
   * queries that are not location aware, such as "best sellers".
   */
  readonly askUserForLocation?: boolean;
}

export interface ResponseBase {
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines the identity of a resource.
*/
export interface Identifiable extends ResponseBase {
  /**
   * A String identifier.
  */
  readonly id?: string;
}

/**
 * Defines a response. All schemas that could be returned at the root of a response should inherit
 * from this
*/
export interface Response extends Identifiable {
  /**
   * A list of rules that you must adhere to if you display the item.
  */
  readonly contractualRules?: ContractualRulesContractualRule[];
  /**
   * The URL To Bing's search result for this item.
  */
  readonly webSearchUrl?: string;
}

export interface Thing extends Response {
  /**
   * The name of the thing represented by this object.
  */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
  */
  readonly url?: string;
  readonly image?: ImageObject;
  /**
   * A short description of the item.
  */
  readonly description?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
  */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
  /**
   * An ID that uniquely identifies this item.
  */
  readonly bingId?: string;
}

export interface CreativeWork extends Thing {
  /**
   * The URL to a thumbnail of the item.
  */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
  */
  readonly provider?: Thing[];
  readonly text?: string;
}

export interface MediaObject extends CreativeWork {
  /**
   * Original URL to retrieve the source (file) for the media object (e.g the source URL for the
   * image).
  */
  readonly contentUrl?: string;
  /**
   * URL of the page that hosts the media object.
  */
  readonly hostPageUrl?: string;
  /**
   * The width of the source media object, in pixels.
  */
  readonly width?: number;
  /**
   * The height of the source media object, in pixels.
  */
  readonly height?: number;
}

/**
 * Defines an image
*/
export interface ImageObject extends MediaObject {
  /**
   * The URL to a thumbnail of the image
  */
  readonly thumbnail?: ImageObject;
}

/**
 * Defines additional information about an entity such as type hints.
*/
export interface EntitiesEntityPresentationInfo {
  /**
   * The supported scenario. Possible values include: 'DominantEntity', 'DisambiguationItem',
   * 'ListItem'
  */
  entityScenario: string;
  /**
   * A list of hints that indicate the entity's type. The list could contain a single hint such as
   * Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each successive hint in the
   * array narrows the entity's type.
  */
  readonly entityTypeHints?: string[];
  /**
   * A display version of the entity hint. For example, if entityTypeHints is Artist, this field
   * may be set to American Singer.
  */
  readonly entityTypeDisplayHint?: string;
}

export interface Answer extends Response {
}

export interface SearchResultsAnswer extends Answer {
  readonly queryContext?: QueryContext;
}

/**
 * Defines an entity answer.
*/
export interface Entities extends SearchResultsAnswer {
  /**
   * The supported query scenario. This field is set to DominantEntity or DisambiguationItem. The
   * field is set to DominantEntity if Bing determines that only a single entity satisfies the
   * request. For example, a book, movie, person, or attraction. If multiple entities could satisfy
   * the request, the field is set to DisambiguationItem. For example, if the request uses the
   * generic title of a movie franchise, the entity's type would likely be DisambiguationItem. But,
   * if the request specifies a specific title from the franchise, the entity's type would likely
   * be DominantEntity. Possible values include: 'DominantEntity',
   * 'DominantEntityWithDisambiguation', 'Disambiguation', 'List', 'ListWithPivot'
  */
  readonly queryScenario?: string;
  /**
   * A list of entities.
  */
  value: Thing[];
}

/**
 * Defines a local entity answer.
*/
export interface Places extends SearchResultsAnswer {
  /**
   * A list of local entities, such as restaurants or hotels.
  */
  value: Thing[];
}

/**
 * Defines the top-level object that the response includes when the request succeeds.
*/
export interface SearchResponse extends Response {
  /**
   * An object that contains the query string that Bing used for the request. This object contains
   * the query string as entered by the user. It may also contain an altered query string that Bing
   * used for the query if the query string contained a spelling mistake.
  */
  readonly queryContext?: QueryContext;
  /**
   * A list of entities that are relevant to the search query.
  */
  readonly entities?: Entities;
  /**
   * A list of local entities such as restaurants or hotels that are relevant to the query.
  */
  readonly places?: Places;
}

export interface ContractualRulesContractualRule {
  /**
   * The name of the field that the rule applies to.
  */
  readonly targetPropertyName?: string;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines the error that occurred.
*/
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'
  */
  code: string;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
  */
  readonly subCode?: string;
  /**
   * A description of the error.
  */
  message: string;
  /**
   * A description that provides additional information about the error.
  */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
  */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
  */
  readonly value?: string;
}

/**
 * The top-level response that represents a failed request.
*/
export interface ErrorResponse extends Response {
  /**
   * A list of errors that describe the reasons why the request failed.
  */
  errors: ErrorModel[];
}

export interface Intangible extends Thing {
}

export interface StructuredValue extends Intangible {
}

/**
 * Defines a postal address.
*/
export interface PostalAddress extends StructuredValue {
  readonly streetAddress?: string;
  /**
   * The city where the street address is located. For example, Seattle.
  */
  readonly addressLocality?: string;
  readonly addressSubregion?: string;
  /**
   * The state or province code where the street address is located. This could be the two-letter
   * code. For example, WA, or the full name , Washington.
  */
  readonly addressRegion?: string;
  /**
   * The zip code or postal code where the street address is located. For example, 98052.
  */
  readonly postalCode?: string;
  readonly postOfficeBoxNumber?: string;
  /**
   * The country/region where the street address is located. This could be the two-letter ISO code.
   * For example, US, or the full name, United States.
  */
  readonly addressCountry?: string;
  /**
   * The two letter ISO code of this country. For example, US.
  */
  readonly countryIso?: string;
  /**
   * The neighborhood where the street address is located. For example, Westlake.
  */
  readonly neighborhood?: string;
  /**
   * Region Abbreviation. For example, WA.
  */
  readonly addressRegionAbbreviation?: string;
  /**
   * The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.
  */
  readonly text?: string;
}

/**
 * Defines information about a local entity, such as a restaurant or hotel.
*/
export interface Place extends Thing {
  /**
   * The postal address of where the entity is located
  */
  readonly address?: PostalAddress;
  /**
   * The entity's telephone number
  */
  readonly telephone?: string;
}

/**
 * Defines an organization.
*/
export interface Organization extends Thing {
}

export interface LocalBusiness extends Place {
  /**
   * $$.
  */
  readonly priceRange?: string;
  readonly panoramas?: ImageObject[];
  readonly isPermanentlyClosed?: boolean;
  readonly tagLine?: string;
}

export interface EntertainmentBusiness extends LocalBusiness {
}

export interface MovieTheater extends EntertainmentBusiness {
  readonly screenCount?: number;
}

export interface ContractualRulesAttribution extends ContractualRulesContractualRule {
  /**
   * A Boolean value that determines whether the contents of the rule must be placed in close
   * proximity to the field that the rule applies to. If true, the contents must be placed in close
   * proximity. If false, or this field does not exist, the contents may be placed at the caller's
   * discretion.
  */
  readonly mustBeCloseToContent?: boolean;
}

export interface CivicStructure extends Place {
}

export interface TouristAttraction extends Place {
}

export interface Airport extends CivicStructure {
  readonly iataCode?: string;
  readonly icaoCode?: string;
}

/**
 * Defines the license under which the text or photo may be used.
*/
export interface License extends CreativeWork {
}

/**
 * Defines a contractual rule for license attribution.
*/
export interface ContractualRulesLicenseAttribution extends ContractualRulesAttribution {
  /**
   * The license under which the content may be used.
  */
  readonly license?: License;
  /**
   * The license to display next to the targeted field.
  */
  readonly licenseNotice?: string;
}

/**
 * Defines a contractual rule for link attribution.
*/
export interface ContractualRulesLinkAttribution extends ContractualRulesAttribution {
  /**
   * The attribution text.
  */
  text: string;
  /**
   * The URL to the provider's website. Use text and URL to create the hyperlink.
  */
  url: string;
  /**
   * Indicates whether this provider's attribution is optional.
  */
  readonly optionalForListDisplay?: boolean;
}

/**
 * Defines a contractual rule for media attribution.
*/
export interface ContractualRulesMediaAttribution extends ContractualRulesAttribution {
  /**
   * The URL that you use to create of hyperlink of the media content. For example, if the target
   * is an image, you would use the URL to make the image clickable.
  */
  readonly url?: string;
}

/**
 * Defines a contractual rule for text attribution.
*/
export interface ContractualRulesTextAttribution extends ContractualRulesAttribution {
  /**
   * The attribution text. Text attribution applies to the entity as a whole and should be
   * displayed immediately following the entity presentation. If there are multiple text or link
   * attribution rules that do not specify a target, you should concatenate them and display them
   * using a "Data from:" label.
  */
  text: string;
  /**
   * Indicates whether this provider's attribution is optional.
  */
  readonly optionalForListDisplay?: boolean;
}

export interface FoodEstablishment extends LocalBusiness {
}

export interface LodgingBusiness extends LocalBusiness {
}

export interface Restaurant extends FoodEstablishment {
  readonly acceptsReservations?: boolean;
  readonly reservationUrl?: string;
  readonly servesCuisine?: string[];
  readonly menuUrl?: string;
}

export interface Hotel extends LodgingBusiness {
  readonly hotelClass?: string;
  readonly amenities?: string[];
}
