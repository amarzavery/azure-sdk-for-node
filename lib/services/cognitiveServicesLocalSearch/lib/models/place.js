/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines information about a local entity, such as a restaurant or hotel.
 *
 * @extends models['Thing']
 */
class Place extends models['Thing'] {
  /**
   * Create a Place.
   * @property {object} [geo]
   * @property {number} [geo.latitude]
   * @property {number} [geo.longitude]
   * @property {number} [geo.elevation]
   * @property {string} [geo._type] Polymorphic Discriminator
   * @property {object} [routablePoint]
   * @property {number} [routablePoint.latitude]
   * @property {number} [routablePoint.longitude]
   * @property {number} [routablePoint.elevation]
   * @property {string} [routablePoint._type] Polymorphic Discriminator
   * @property {object} [address] The postal address of where the entity is
   * located
   * @property {string} [address.streetAddress]
   * @property {string} [address.addressLocality] The city where the street
   * address is located. For example, Seattle.
   * @property {string} [address.addressSubregion]
   * @property {string} [address.addressRegion] The state or province code
   * where the street address is located. This could be the two-letter code.
   * For example, WA, or the full name , Washington.
   * @property {string} [address.postalCode] The zip code or postal code where
   * the street address is located. For example, 98052.
   * @property {string} [address.postOfficeBoxNumber]
   * @property {string} [address.addressCountry] The country/region where the
   * street address is located. This could be the two-letter ISO code. For
   * example, US, or the full name, United States.
   * @property {string} [address.countryIso] The two letter ISO code of this
   * country. For example, US.
   * @property {string} [address.neighborhood] The neighborhood where the
   * street address is located. For example, Westlake.
   * @property {string} [address.addressRegionAbbreviation] Region
   * Abbreviation. For example, WA.
   * @property {string} [address.text] The complete address. For example, 2100
   * Westlake Ave N, Bellevue, WA 98052.
   * @property {string} [address.houseNumber]
   * @property {string} [address.streetName]
   * @property {string} [address.formattingRuleId]
   * @property {string} [telephone] The entity's telephone number
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Place
   *
   * @returns {object} metadata of Place
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Place',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '_type',
          clientName: '_type'
        },
        uberParent: 'ResponseBase',
        className: 'Place',
        modelProperties: {
          _type: {
            required: true,
            serializedName: '_type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          readLink: {
            required: false,
            readOnly: true,
            serializedName: 'readLink',
            type: {
              name: 'String'
            }
          },
          webSearchUrl: {
            required: false,
            readOnly: true,
            serializedName: 'webSearchUrl',
            type: {
              name: 'String'
            }
          },
          potentialAction: {
            required: false,
            readOnly: true,
            serializedName: 'potentialAction',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'Action'
                  }
              }
            }
          },
          immediateAction: {
            required: false,
            readOnly: true,
            serializedName: 'immediateAction',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ActionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: '_type',
                      clientName: '_type'
                    },
                    uberParent: 'ResponseBase',
                    className: 'Action'
                  }
              }
            }
          },
          preferredClickthroughUrl: {
            required: false,
            readOnly: true,
            serializedName: 'preferredClickthroughUrl',
            type: {
              name: 'String'
            }
          },
          adaptiveCard: {
            required: false,
            readOnly: true,
            serializedName: 'adaptiveCard',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          url: {
            required: false,
            readOnly: true,
            serializedName: 'url',
            type: {
              name: 'String'
            }
          },
          entityPresentationInfo: {
            required: false,
            readOnly: true,
            serializedName: 'entityPresentationInfo',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'EntitiesEntityPresentationInfo',
              className: 'EntitiesEntityPresentationInfo'
            }
          },
          geo: {
            required: false,
            readOnly: true,
            serializedName: 'geo',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'GeoCoordinates',
              className: 'GeoCoordinates'
            }
          },
          routablePoint: {
            required: false,
            readOnly: true,
            serializedName: 'routablePoint',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'GeoCoordinates',
              className: 'GeoCoordinates'
            }
          },
          address: {
            required: false,
            readOnly: true,
            serializedName: 'address',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: '_type',
                clientName: '_type'
              },
              uberParent: 'ResponseBase',
              className: 'PostalAddress'
            }
          },
          telephone: {
            required: false,
            readOnly: true,
            serializedName: 'telephone',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Place;
