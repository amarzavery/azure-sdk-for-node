/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Defines the query context that Bing used for the request.
 */
export interface QueryContext {
  /**
   * The query string as specified in the request.
   */
  originalQuery: string;
  /**
   * The query string used by Bing to perform the query. Bing uses the altered query string if the
   * original query string contained spelling mistakes. For example, if the query string is "saling
   * downwind", the altered query string will be "sailing downwind". This field is included only if
   * the original query string contains a spelling mistake.
   */
  readonly alteredQuery?: string;
  /**
   * AlteredQuery that is formatted for display purpose. The query string in the
   * AlterationDisplayQuery can be html-escaped and can contain hit-highlighting characters
   */
  readonly alterationDisplayQuery?: string;
  /**
   * The query string to use to force Bing to use the original string. For example, if the query
   * string is "saling downwind", the override query string will be "+saling downwind". Remember to
   * encode the query string which results in "%2Bsaling+downwind". This field is included only if
   * the original query string contains a spelling mistake.
   */
  readonly alterationOverrideQuery?: string;
  /**
   * A Boolean value that indicates whether the specified query has adult intent. The value is true
   * if the query has adult intent; otherwise, false.
   */
  readonly adultIntent?: boolean;
  /**
   * A Boolean value that indicates whether Bing requires the user's location to provide accurate
   * results. If you specified the user's location by using the X-MSEdge-ClientIP and
   * X-Search-Location headers, you can ignore this field. For location aware queries, such as
   * "today's weather" or "restaurants near me" that need the user's location to provide accurate
   * results, this field is set to true. For location aware queries that include the location (for
   * example, "Seattle weather"), this field is set to false. This field is also set to false for
   * queries that are not location aware, such as "best sellers".
   */
  readonly askUserForLocation?: boolean;
  readonly isTransactional?: boolean;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines additional information about an entity such as type hints.
*/
export interface EntitiesEntityPresentationInfo {
  /**
   * The supported scenario. Possible values include: 'DominantEntity', 'DisambiguationItem',
   * 'ListItem'
  */
  entityScenario: string;
  /**
   * A list of hints that indicate the entity's type. The list could contain a single hint such as
   * Movie or a list of hints such as Place, LocalBusiness, Restaurant. Each successive hint in the
   * array narrows the entity's type.
  */
  readonly entityTypeHints?: string[];
  /**
   * A display version of the entity hint. For example, if entityTypeHints is Artist, this field
   * may be set to American Singer.
  */
  readonly entityTypeDisplayHint?: string;
  readonly query?: string;
  readonly entitySubTypeHints?: string[];
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Response base
*/
export interface ResponseBase {
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines the identity of a resource.
*/
export interface Identifiable extends ResponseBase {
  /**
   * A String identifier.
  */
  readonly id?: string;
}

/**
 * Defines a response. All schemas that return at the root of the response must inherit from this
 * object.
*/
export interface Response extends Identifiable {
  /**
   * The URL that returns this resource.
  */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
  */
  readonly webSearchUrl?: string;
  readonly potentialAction?: Action[];
  readonly immediateAction?: Action[];
  readonly preferredClickthroughUrl?: string;
  readonly adaptiveCard?: string;
}

/**
 * Defines a thing.
*/
export interface Thing extends Response {
  /**
   * The name of the thing represented by this object.
  */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
  */
  readonly url?: string;
  /**
   * Additional information about the entity such as hints that you can use to determine the
   * entity's type. To determine the entity's type, use the entityScenario and entityTypeHint
   * fields.
  */
  readonly entityPresentationInfo?: EntitiesEntityPresentationInfo;
}

/**
 * Defines an answer.
*/
export interface Answer extends Response {
}

/**
 * Defines a search result answer.
*/
export interface SearchResultsAnswer extends Answer {
  readonly queryContext?: QueryContext;
  /**
   * The estimated number of webpages that are relevant to the query. Use this number along with
   * the count and offset query parameters to page the results.
  */
  readonly totalEstimatedMatches?: number;
  readonly isFamilyFriendly?: boolean;
}

/**
 * Defines a local entity answer.
*/
export interface Places extends SearchResultsAnswer {
  /**
   * A list of local entities, such as restaurants or hotels.
  */
  value: Thing[];
}

/**
 * Defines the top-level object that the response includes when the request succeeds.
*/
export interface SearchResponse extends Response {
  /**
   * An object that contains the query string that Bing used for the request. This object contains
   * the query string as entered by the user. It may also contain an altered query string that Bing
   * used for the query if the query string contained a spelling mistake.
  */
  readonly queryContext?: QueryContext;
  /**
   * A list of local entities such as restaurants or hotels that are relevant to the query.
  */
  readonly places?: Places;
  readonly lottery?: SearchResultsAnswer;
  readonly searchResultsConfidenceScore?: number;
}

export interface GeoCoordinates {
  latitude: number;
  longitude: number;
  readonly elevation?: number;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as
 * quantities, structured values, etc.
*/
export interface Intangible extends Thing {
}

export interface StructuredValue extends Intangible {
}

/**
 * Defines a postal address.
*/
export interface PostalAddress extends StructuredValue {
  readonly streetAddress?: string;
  /**
   * The city where the street address is located. For example, Seattle.
  */
  readonly addressLocality?: string;
  readonly addressSubregion?: string;
  /**
   * The state or province code where the street address is located. This could be the two-letter
   * code. For example, WA, or the full name , Washington.
  */
  readonly addressRegion?: string;
  /**
   * The zip code or postal code where the street address is located. For example, 98052.
  */
  readonly postalCode?: string;
  readonly postOfficeBoxNumber?: string;
  /**
   * The country/region where the street address is located. This could be the two-letter ISO code.
   * For example, US, or the full name, United States.
  */
  readonly addressCountry?: string;
  /**
   * The two letter ISO code of this country. For example, US.
  */
  readonly countryIso?: string;
  /**
   * The neighborhood where the street address is located. For example, Westlake.
  */
  readonly neighborhood?: string;
  /**
   * Region Abbreviation. For example, WA.
  */
  readonly addressRegionAbbreviation?: string;
  /**
   * The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.
  */
  readonly text?: string;
  readonly houseNumber?: string;
  readonly streetName?: string;
  readonly formattingRuleId?: string;
}

/**
 * Defines information about a local entity, such as a restaurant or hotel.
*/
export interface Place extends Thing {
  readonly geo?: GeoCoordinates;
  readonly routablePoint?: GeoCoordinates;
  /**
   * The postal address of where the entity is located
  */
  readonly address?: PostalAddress;
  /**
   * The entity's telephone number
  */
  readonly telephone?: string;
}

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs,
 * etc.
*/
export interface CreativeWork extends Thing {
  /**
   * The URL to a thumbnail of the item.
  */
  readonly thumbnailUrl?: string;
  /**
   * For internal use only.
  */
  readonly about?: Thing[];
  /**
   * For internal use only.
  */
  readonly mentions?: Thing[];
  /**
   * The source of the creative work.
  */
  readonly provider?: Thing[];
  readonly creator?: Thing;
  /**
   * Text content of this creative work
  */
  readonly text?: string;
  readonly discussionUrl?: string;
  readonly commentCount?: number;
  readonly mainEntity?: Thing;
  readonly headLine?: string;
  readonly copyrightHolder?: Thing;
  readonly copyrightYear?: number;
  readonly disclaimer?: string;
  readonly isAccessibleForFree?: boolean;
  readonly genre?: string[];
  readonly isFamilyFriendly?: boolean;
}

/**
 * Defines an action.
*/
export interface Action extends CreativeWork {
  readonly location?: Place[];
  /**
   * The result produced in the action.
  */
  readonly result?: Thing[];
  /**
   * A display name for the action.
  */
  readonly displayName?: string;
  /**
   * A Boolean representing whether this result is the top action.
  */
  readonly isTopAction?: boolean;
  /**
   * Use this URL to get additional data to determine how to take the appropriate action. For
   * example, the serviceUrl might return JSON along with an image URL.
  */
  readonly serviceUrl?: string;
}

/**
 * Defines the error that occurred.
*/
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'
  */
  code: string;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
  */
  readonly subCode?: string;
  /**
   * A description of the error.
  */
  message: string;
  /**
   * A description that provides additional information about the error.
  */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
  */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
  */
  readonly value?: string;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * The top-level response that represents a failed request.
*/
export interface ErrorResponse extends Response {
  /**
   * A list of errors that describe the reasons why the request failed.
  */
  errors: ErrorModel[];
}

export interface SearchAction extends Action {
  readonly displayText?: string;
  readonly query?: string;
  readonly richContent?: Answer[];
  readonly formattingRuleId?: string;
}
