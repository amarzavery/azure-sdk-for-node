/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents a size category supported by this Lab Account (small, medium or
 * large)
 *
 */
class EnvironmentSize {
  /**
   * Create a EnvironmentSize.
   * @property {string} [name] The size category. Possible values include:
   * 'Basic', 'Standard', 'Performance'
   * @property {array} [vmSizes] Represents a set of compute sizes that can
   * serve this given size type
   * @property {number} [maxPrice] The pay-as-you-go dollar price per hour this
   * size will cost. It does not include discounts and may not reflect the
   * actual price the size will cost. This is the maximum price of all prices
   * within this tier.
   * @property {number} [minNumberOfCores] The number of cores a VM of this
   * size has. This is the minimum number of cores within this tier.
   * @property {number} [minMemory] The amount of memory available (in GB).
   * This is the minimum amount of memory within this tier.
   */
  constructor() {
  }

  /**
   * Defines the metadata of EnvironmentSize
   *
   * @returns {object} metadata of EnvironmentSize
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EnvironmentSize',
      type: {
        name: 'Composite',
        className: 'EnvironmentSize',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          vmSizes: {
            required: false,
            serializedName: 'vmSizes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SizeInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'SizeInfo'
                  }
              }
            }
          },
          maxPrice: {
            required: false,
            readOnly: true,
            serializedName: 'maxPrice',
            type: {
              name: 'Number'
            }
          },
          minNumberOfCores: {
            required: false,
            readOnly: true,
            serializedName: 'minNumberOfCores',
            type: {
              name: 'Number'
            }
          },
          minMemory: {
            required: false,
            readOnly: true,
            serializedName: 'minMemory',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = EnvironmentSize;
